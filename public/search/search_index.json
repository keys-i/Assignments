{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Assignments are at:</p>"},{"location":"#os","title":"OS","text":"<p>Table of Content</p>"},{"location":"Assignments/OS/","title":"Table of Content","text":"<ol> <li>assignment 1</li> <li>assignment 2</li> </ol>"},{"location":"Assignments/OS/Assignment1/","title":"Assignment 1","text":""},{"location":"Assignments/OS/Assignment1/#q1-introduction-to-various-linux-operating-systems-and-basic-commands","title":"Q1. Introduction to Various Linux Operating Systems and Basic Commands","text":""},{"location":"Assignments/OS/Assignment1/#various-linux-distributions","title":"Various Linux Distributions","text":"<p>Linux is an open-source operating system that is widely used for a variety of purposes, including servers, desktops, and embedded systems. It is known for its stability, security, and flexibility. Here are some popular Linux distributions:</p> Distribution Use Case Description Ubuntu Desktop, server, and cloud computing Ubuntu is one of the most popular Linux distributions, especially for beginners. It is user-friendly and has a large community for support. Fedora Desktop, development, and servers Fedora is a cutting-edge Linux distribution that offers the latest software and features. It is the upstream source for Red Hat Enterprise Linux (RHEL). Debian Server, desktop, and embedded Debian is a highly stable and reliable distribution. It is the foundation for many others, including Ubuntu. Debian focuses on free software and quality. CentOS Server environments CentOS was compatible with Red Hat Enterprise Linux (RHEL) and widely used in enterprise environments for stability and security. Now CentOS Stream. Arch Linux Advanced users, customization Arch Linux is a lightweight and flexible distribution that follows a rolling-release model. It is highly customizable and suited for experienced users. AlmaLinux Server environments AlmaLinux is a community-driven replacement for CentOS, aiming to be a stable, production-grade operating system. Kali Linux Security testing Kali Linux is a Debian-based distribution designed for digital forensics and penetration testing, with numerous pre-installed security auditing tools."},{"location":"Assignments/OS/Assignment1/#basic-linux-commands","title":"Basic Linux Commands","text":"Command Description Example <code>pwd</code> Displays the current directory. <code>pwd</code> <code>ls</code> Lists files and directories. Options: <code>-l</code> for detailed list, <code>-a</code> to show hidden files. <code>ls</code>, <code>ls -la</code> <code>cd</code> Changes the current directory. <code>cd /home/username/Documents</code> <code>mkdir</code> Creates a new directory. <code>mkdir new_directory</code> <code>rmdir</code> Removes an empty directory. <code>rmdir new_directory</code> <code>rm</code> Deletes files or directories. Option: <code>-r</code> to remove directories and their contents recursively. <code>rm file.txt</code>, <code>rm -r directory/</code> <code>cp</code> Copies files or directories. Option: <code>-r</code> to copy directories recursively. <code>cp source.txt destination.txt</code> <code>mv</code> Moves or renames files or directories. <code>mv old_name.txt new_name.txt</code> <code>cat</code> Displays the contents of a file. <code>cat file.txt</code> <code>nano</code>/<code>vim</code> Edits files directly from the command line. <code>nano file.txt</code>, <code>vim file.txt</code> <code>chmod</code> Changes the permissions of a file or directory. Example: <code>755</code> gives the owner full permissions, others can read/execute. <code>chmod 755 script.sh</code> <code>chown</code> Changes the owner of a file or directory. <code>chown username:groupname file.txt</code> <code>df</code> Displays the amount of disk space available on the file system. Option: <code>-h</code> for human-readable format. <code>df -h</code> <code>du</code> Estimates and displays the disk space used by files and directories. Option: <code>-h</code> for human-readable format. <code>du -h /home/username/</code> <code>mount</code> Mounts a file system or device to a specified directory. <code>mount /dev/sda1 /mnt</code> <code>umount</code> Unmounts a file system or device. <code>umount /mnt</code> <code>fsck</code> Checks and repairs a Linux file system. Must be run with <code>sudo</code>. <code>sudo fsck /dev/sda1</code> <code>mkfs</code> Creates a new file system on a device. Example: <code>mkfs.ext4</code> for an ext4 file system. <code>mkfs.ext4 /dev/sda1</code> <code>blkid</code> Displays information about block devices, including their UUID and file system type. <code>blkid /dev/sda1</code> <code>ln</code> Creates a hard or symbolic link to a file. Option: <code>-s</code> for symbolic (soft) link. <code>ln -s /path/to/file /path/to/link</code> <code>top</code> Displays real-time information about running processes. <code>top</code> <code>ps</code> Displays information about active processes. <code>ps aux</code> <code>kill</code> Terminates a process by its PID (Process ID). <code>kill 1234</code> <code>grep</code> Searches for specific text patterns in files. <code>grep \"pattern\" file.txt</code> <code>find</code> Searches for files and directories based on criteria. <code>find /home -name \"file.txt\"</code> <code>tar</code> Archives files into a tarball or extracts them. Option: <code>-xvf</code> to extract files from an archive. <code>tar -cvf archive.tar directory/</code> <code>sudo</code> Executes a command with superuser (root) privileges. <code>sudo apt-get update</code>"},{"location":"Assignments/OS/Assignment2/","title":"Assignment 2","text":""},{"location":"Assignments/OS/Assignment2/#q1-introduction-to-the-linux-file-system-and-related-commands","title":"Q1. Introduction to the Linux File System and Related Commands","text":""},{"location":"Assignments/OS/Assignment2/#linux-file-system","title":"Linux File System","text":"<p>Hierarchy</p> Directory Purpose <code>/</code> The root directory; the top level of the file system. <code>/bin</code> Essential command binaries needed for system repair and operation in single-user mode. <code>/boot</code> Files related to the bootloader, including the Linux kernel and boot configuration. <code>/dev</code> Device files representing hardware components and peripherals. <code>/etc</code> Configuration files for the system and various software packages. <code>/home</code> User's personal directories, where each user has a subdirectory. <code>/lib</code> Essential shared libraries and kernel modules. <code>/media</code> Mount points for removable media such as USB drives and CDs. <code>/mnt</code> Temporary mount points for file systems. <code>/opt</code> Optional application software packages. <code>/proc</code> Virtual file system providing process and system information. <code>/root</code> The home directory of the root user. <code>/sbin</code> System binaries essential for booting and system repair, typically used by the root user. <code>/srv</code> Data for services provided by the system, like web servers. <code>/tmp</code> Temporary files used by the system and applications. <code>/usr</code> Secondary hierarchy for user-related programs and data. <code>/var</code> Variable data files, such as logs, mail spools, and databases."},{"location":"Assignments/OS/Assignment2/#commands","title":"Commands","text":"Command Description Example <code>pwd</code> Displays the current directory. <code>pwd</code> <code>ls</code> Lists files and directories. Options: <code>-l</code> for detailed list, <code>-a</code> to show hidden files. <code>ls</code>, <code>ls -la</code> <code>cd</code> Changes the current directory. <code>cd /home/username/Documents</code> <code>mkdir</code> Creates a new directory. <code>mkdir new_directory</code> <code>rmdir</code> Removes an empty directory. <code>rmdir new_directory</code> <code>rm</code> Deletes files or directories. Option: <code>-r</code> to remove directories and their contents recursively. <code>rm file.txt</code>, <code>rm -r directory/</code> <code>cp</code> Copies files or directories. Option: <code>-r</code> to copy directories recursively. <code>cp source.txt destination.txt</code> <code>mv</code> Moves or renames files or directories. <code>mv old_name.txt new_name.txt</code> <code>chmod</code> Changes the permissions of a file or directory. Example: <code>755</code> gives the owner full permissions, others can read/execute. <code>chmod 755 script.sh</code> <code>chown</code> Changes the owner of a file or directory. <code>chown username:groupname file.txt</code> <code>df</code> Displays the amount of disk space available on the file system. Option: <code>-h</code> for human-readable format. <code>df -h</code> <code>du</code> Estimates and displays the disk space used by files and directories. Option: <code>-h</code> for human-readable format. <code>du -h /home/username/</code> <code>mount</code> Mounts a file system or device to a specified directory. <code>mount /dev/sda1 /mnt</code> <code>umount</code> Unmounts a file system or device. <code>umount /mnt</code> <code>fsck</code> Checks and repairs a Linux file system. Must be run with <code>sudo</code>. <code>sudo fsck /dev/sda1</code> <code>mkfs</code> Creates a new file system on a device. Example: <code>mkfs.ext4</code> for an ext4 file system. <code>mkfs.ext4 /dev/sda1</code> <code>blkid</code> Displays information about block devices, including their UUID and file system type. <code>blkid /dev/sda1</code> <code>ln</code> Creates a hard or symbolic link to a file. Option: <code>-s</code> for symbolic (soft) link. <code>ln -s /path/to/file /path/to/link</code>"},{"location":"Assignments/OS/Assignment2/#q2-introduction-to-vim-editor-and-shell-scripting-basics","title":"Q2. Introduction to Vim editor and Shell Scripting basics","text":""},{"location":"Assignments/OS/Assignment2/#what-is-vim","title":"What is Vim?","text":"<p>Vim is a highly configurable text editor that is an improved version of the older vi editor. It's widely used for programming and general text editing, especially on Unix-like systems.</p>"},{"location":"Assignments/OS/Assignment2/#why-use-vim","title":"Why Use Vim?","text":"<ul> <li>Efficiency: Vim is designed for speed and efficiency, allowing you to perform text editing tasks with minimal keystrokes.</li> <li>Modal Editing: Vim uses different modes for inserting text, navigating, and performing commands, which reduces the need for using the mouse or arrow keys.</li> <li>Customization: Vim is highly customizable, supporting plugins, scripts, and personalized key mappings.</li> </ul>"},{"location":"Assignments/OS/Assignment2/#basic-vim-modes","title":"Basic Vim Modes","text":"Mode Purpose Normal The default mode for navigating and manipulating text. Insert Activated by pressing i, a, o, etc., for inserting text. Visual Activated by pressing v, used for selecting text. Command Accessed from Normal Mode by typing : to execute commands like saving, quitting, etc."},{"location":"Assignments/OS/Assignment2/#basic-commands","title":"Basic Commands","text":"Category Command Description Navigation <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code> Move left, down, up, right respectively. <code>gg</code> Go to the beginning of the file. <code>G</code> Go to the end of the file. Editing <code>i</code> Enter Insert Mode before the cursor. <code>x</code> Delete the character under the cursor. <code>dd</code> Delete the current line. <code>u</code> Undo the last action. Saving and Quitting <code>:w</code> Save the file. <code>:q</code> Quit Vim. <code>:wq</code> Save and quit. <code>:q!</code> Quit without saving."},{"location":"Assignments/OS/Assignment2/#introduction-to-shell-scripting","title":"Introduction to Shell Scripting","text":""},{"location":"Assignments/OS/Assignment2/#what-is-a-shell-script","title":"What is a Shell Script?","text":"<p>A shell script is a text file that contains a series of commands for a Unix-based operating system's shell (like Bash) to execute. Shell scripts are used to automate tasks, simplify complex operations, and manage system administration.</p>"},{"location":"Assignments/OS/Assignment2/#why-use-shell-scripting","title":"Why Use Shell Scripting?","text":"<ul> <li>Automation: Repetitive tasks can be automated, saving time and reducing errors.</li> <li>System Administration: Shell scripts are widely used for system maintenance, backups, user management, and more.</li> <li>Integration: Shell scripts can easily integrate different programs and utilities within a Unix-based system.</li> </ul>"},{"location":"Assignments/OS/Assignment2/#basic-shell-script-structure","title":"Basic Shell Script Structure","text":"<pre><code>#!/bin/bash\n# This is a comment\necho \"Hello, World!\" # This prints Hello, World!\n</code></pre> <ul> <li><code>#!/bin/bash</code>: Shebang line indicating the script should be run in the Bash shell.</li> <li><code>echo \"Hello, World!\"</code>: Command to print text to the terminal.</li> </ul>"},{"location":"Assignments/OS/Assignment2/#common-commands","title":"Common Commands","text":""},{"location":"Assignments/OS/Assignment2/#variables","title":"Variables:","text":"<pre><code>NAME=\"John\"\necho \"Hello, $NAME\"\n</code></pre>"},{"location":"Assignments/OS/Assignment2/#conditional-statements","title":"Conditional Statements:","text":"<pre><code>if [ \"$NAME\" == \"John\" ]; then\n    echo \"Welcome, John!\"\nelse\n    echo \"Who are you?\"\nfi\n</code></pre>"},{"location":"Assignments/OS/Assignment2/#loops","title":"Loops:","text":"<pre><code>for i in 1 2 3; do\n    echo \"Number $i\"\ndone\n</code></pre>"},{"location":"Assignments/OS/Assignment2/#functions","title":"Functions:","text":"<pre><code>my_function() {\n    echo \"This is a function\"\n}\nmy_function\n</code></pre>"},{"location":"Assignments/OS/Assignment2/#running-a-shell-script","title":"Running a Shell Script","text":"<ol> <li>Create a file: <code>touch script.sh</code></li> <li>Make it executable: <code>chmod +x script.sh</code></li> <li>Run the script: <code>./script.sh</code></li> </ol>"},{"location":"Assignments/OS/Assignment2/#q3-execution-of-simple-c-programs-using-gcc-and-passing-of-command-line-arguments","title":"Q3. Execution of simple C programs using GCC and passing of Command line arguments","text":"<pre><code>// Copyright 2024 Keys\n#include &lt;stdio.h&gt;\n\nint main(int argc, char *argv[]) {\n    if (argc &lt; 2) {\n        printf(\"No arguments provided.\\n\");\n        return 1;\n    }\n\n    printf(\"Number of arguments: %d\\n\", argc);\n    printf(\"Arguments passed:\\n\");\n\n    for (int i = 0; i &lt; argc; ++i) {\n        printf(\"argv[%d]: %s\\n\", i, argv[i]);\n    }\n\n    return 0;\n}\n</code></pre> <p>To run the above program:  &gt; <code>gcc -o myprogram myprogram.c &amp;&amp; ./myprogram hello word 123</code></p>"},{"location":"Assignments/OS/Assignment2/#q4-implementation-of-file-system-calls","title":"Q4. Implementation of File System calls:","text":""},{"location":"Assignments/OS/Assignment2/#a-write-a-program-to-open-an-existing-file-read-its-contents-and-display-them-on-the-console","title":"(a) Write a program to open an existing file, read its contents, and display them on the console.","text":"<pre><code>// Copyright 2024 Keys\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"Usage: %s &lt;filename&gt;\\n\", argv[0]);\n        return 1;\n    }\n\n    FILE *file = fopen(argv[1], \"r\");\n    if (file == NULL) {\n        perror(\"Error opening file.\");\n        return 1;\n    }\n\n    char ch;\n    while (ch = fgetc(file) != EOF) {\n        putchar(ch);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Assignments/OS/Assignment2/#b-write-a-program-to-copy-a-file-specified-by-the-user-at-runtime-use-command-line-arguments-to-specify-the-source-and-destination-file-names","title":"(b) Write a program to copy a file specified by the user at runtime. Use command-line arguments to specify the source and destination file names.","text":"<pre><code>// Copyright 2024 Keys\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) {\n        fprintf(stderr, \"Usage: %s &lt;source&gt; &lt;destination&gt;\\n\", argv[0]);\n        return 1;\n    }\n\n    FILE *source = fopen(argv[1], \"rb\");\n    if (source == NULL) {\n        perror(\"Error opening source file.\");\n        return 1;\n    }\n\n    FILE *destination = fopen(argv[2], \"wb\");\n    if (destination == NULL) {\n        perror(\"Error opening destination file.\");\n        fclose(source);\n        return 1;\n    }\n\n    char buffer[1024];\n    size_t bytes_read;\n    while ((bytes_read = fread(buffer, 1, sizeof(buffer), source)) &gt; 0) {\n        fwrite(buffer, 1, sizeof(buffer), destination);\n    }\n\n    fclose(source);\n    fclose(destination);\n    return 0;\n}\n</code></pre>"},{"location":"Assignments/OS/Assignment2/#c-write-a-program-to-create-a-new-file-write-a-user-specified-string-into-it-and-then-read-the-contents-of-the-file-and-display-them","title":"(c) Write a program to create a new file, write a user-specified string into it, and then read the contents of the file and display them.","text":"<pre><code>// Copyright 2024 Keys\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n    char filename[100];\n    char content[256];\n\n    printf(\"Enter Filename: \");\n    scanf(\"%99s\", filename);\n\n    printf(\"Enter Content: \");\n    scanf(\"%255[^\\n]\", content);\n\n    FILE *file = fopen(filename, \"w\");\n    if (file == NULL) {\n        perror(\"Error creating file.\");\n        return 1;\n    }\n    fprintf(file, \"%s\\n\", content);\n    fclose(file);\n\n    file = fopen(filename, \"r\");\n    if (file == NULL) {\n        perror(\"Error opening file.\");\n        return 1;\n    }\n\n    printf(\"Contents of %s: \\n\", filename);\n    while (fgets(content, sizeof(content), file)) {\n        printf(\"%s\", content);\n    }\n\n    fclose(file);\n    return 0;\n}\n</code></pre>"},{"location":"Assignments/OS/Assignment2/#d-write-a-program-to-open-a-file-count-the-number-of-words-in-the-file-and-display-the-count","title":"(d) Write a program to open a file, count the number of words in the file, and display the count.","text":"<pre><code>// Copyright 2024 Keys\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;ctype.h&gt;\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"Usage: %s &lt;filename&gt;\\n\", argv[0]);\n        return 1;\n    }\n\n    FILE *file = fopen(argv[1], \"r\");\n    if (file == NULL) {\n        perror(\"Error opening file.\");\n        return 1;\n    }\n\n    int c, prev = ' ', word_count = 0;\n    while ((c = fgetc(file)) != EOF) {\n        if (isspace(c) &amp;&amp; !isspace(prev)) {\n            word_count++;\n        }\n        prev = c;\n    }\n    if (!isspace(prev)) {\n        word_count++;\n    }\n    fclose(file);\n    printf(\"Number of words in %s: %d\\n\", argv[1], word_count);\n    return 0;\n}\n</code></pre>"},{"location":"Assignments/OS/Assignment2/#e-write-a-program-to-implement-a-simple-file-encryption-and-decryption-system-use-simple-xor-encryption-for-the-purpose-of-this-assignment","title":"(e) Write a program to implement a simple file encryption and decryption system. Use simple XOR encryption for the purpose of this assignment.","text":"<pre><code>// Copyright 2024 Keys\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nvoid xor_encrypt(FILE *input, FILE *output, char *key) {\n    int c;\n    while ((c = fgetc(input)) != EOF) {\n        fputc(c ^ *key, output);\n    }\n}\n\nvoid xor_decrypt(FILE *input, FILE *output, char *key) {\n    xor_encrypt(input, output, key);  // XOR is symmetric, so encryption and decryption\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) {\n        fprintf(stderr, \"Usage: %s &lt;mode&gt; &lt;filename&gt; &lt;key&gt;\\n\", argv[0]);\n        fprintf(stderr, \"Modes: encrypt or decrypt\\n\");\n        return 1;\n    }\n\n    const char *mode = argv[1];\n    const char *filename = argv[2];\n    char *key = argv[3];\n\n    FILE *input_file = fopen(filename, \"rb\");\n    if (input_file == NULL) {\n        perror(\"Error opening input file\");\n        return 1;\n    }\n\n    char output_filename[256];\n    if (strcmp(mode, \"encrypt\") == 0) {\n        snprintf(output_filename, sizeof(output_filename), \"%s.enc\", filename);\n    } else if (strcmp(mode, \"decrypt\") == 0) {\n        snprintf(output_filename, sizeof(output_filename), \"%s.dec\", filename);\n    } else {\n        fprintf(stderr, \"Invalid mode: %s\\n\", mode);\n        fclose(input_file);\n        return 1;\n    }\n\n    FILE *output_file = fopen(output_filename, \"wb\");\n    if (output_file == NULL) {\n        perror(\"Error opening output file\");\n        fclose(input_file);\n        return 1;\n    }\n\n    if (strcmp(mode, \"encrypt\") == 0) {\n        xor_encrypt(input_file, output_file, key);\n    } else {\n        xor_decrypt(input_file, output_file, key);\n    }\n\n    fclose(input_file);\n    fclose(output_file);\n\n    printf(\"Operation %s completed successfully, Output file: %s\\n\", mode, output_filename);\n\n    return 0;\n}\n</code></pre>"},{"location":"Assignments/OS/Assignment3/","title":"Assignment 3","text":""},{"location":"Assignments/OS/Assignment3/#q1-file-descriptor-duplication-using-dup","title":"Q1. File Descriptor Duplication Using <code>dup()</code>","text":"<p>Write a program that opens a file, duplicates its file descriptor using <code>dup()</code>, writes to both the original and duplicated file descriptors, and then verifies the contents of the file.</p> <p>Hint: Use <code>open()</code>, <code>dup()</code>, <code>write()</code>, and <code>close()</code> system calls. <pre><code>// Copyright 2024 Keys\n#include&lt;stdio.h&gt;\n#include&lt;fcntl.h&gt;\n#include&lt;unistd.h&gt;\n\nint main() {\n    int fd = open(\"file.txt\", O_WRONLY | O_CREAT, O_TRUNC, 0644);\n    if (fd &lt; 0) {\n        perror(\"open\");\n        return 1;\n    }\n\n    int fd_dup = dup(fd);\n    if (fd_dup &lt; 0) {\n        perror(\"dup\");\n        close(fd);\n        return 1;\n    }\n\n    write(fd, \"Hello, \", 7);\n    write(fd_dup, \"World!\\n\", 7);\n    close(fd);\n    close(fd_dup);\n    return 0;\n}\n``````c\n// Copyright 2024 Keys\n#include&lt;stdio.h&gt;\n#include&lt;fcntl.h&gt;\n#include&lt;unistd.h&gt;\n\nint main() {\n    int fd = open(\"file.txt\", O_WRONLY | O_CREAT, O_TRUNC, 0644);\n    if (fd &lt; 0) {\n        perror(\"open\");\n        return 1;\n    }\n\n    if (dup2(fd, STDOUT_FILENO) &lt; 0) {\n        perror(\"dup2\");\n        close(fd);\n        return 1;\n    }\n\n    printf(\"This message is written to the file instead of stdout.\\n\");\n\n    close(fd);\n    return 0;\n}\n\n``````c\n// Copyright 2024 Keys\n#include&lt;stdio.h&gt;\n#include&lt;fcntl.h&gt;\n#include&lt;unistd.h&gt;\n#include&lt;sys/stat.h&gt;\n\nint main() {\n    if (link(\"orignal.txt\", \"hardlink.txt\") &lt; 0) {\n        perror(\"link\");\n        return 1;\n    }\n\n    struct stat statbuf;\n    if (stat(\"orignal.txt\", &amp;statbuf) == 0)\n        printf(\"Orignal file: inode: %lu\\n\", statbuf.st_ino);\n\n    if (stat(\"hardlink.txt\", &amp;statbuf) == 0)\n        printf(\"Hard Link inode: %lu\\n\", statbuf.st_ino);\n    return 0;\n}\n\n``````c\n// Copyright 2024 Keys\n#include&lt;stdio.h&gt;\n#include&lt;fcntl.h&gt;\n#include&lt;unistd.h&gt;\n\nint main() {\n    int fd = open(\"file.txt\", O_WRONLY | O_CREAT, 0644);\n    if (fd &lt; 0) {\n        perror(\"open\");\n        return 1;\n    }\n\n    close(fd);\n\n    if (unlink(\"tmpfile.txt\") &lt; 0) {\n        perror(\"unlink\");\n        return 1;\n    }\n\n    if (open(\"tmpfile.txt\", O_RDONLY) &lt; 0) perror(\"File deleted Successfully\");\n    else printf(\"File still exists\");\n\n    return 0;\n}\n</code></pre></p>"}]}